package edu.umkc.smt.tetrisplugin.clock;



public class ClockImp implements IClockImp
{
	private ClockArch _arch;
	
	/**
	 * The number of milliseconds that make up one cycle.
	 */
	private float millisPerCycle;
	
	/**
	 * The last time that the clock was updated (used for calculating the
	 * delta time).
	 */
	private long lastUpdate;
	
	/**
	 * The number of cycles that have elapsed and have not yet been polled.
	 */
	private int elapsedCycles;
	
	/**
	 * The amount of excess time towards the next elapsed cycle.
	 */
	private float excessCycles;
	
	/**
	 * Whether or not the clock is paused.
	 */
	private boolean isPaused;
	

    public ClockImp (){
    }

	public void setArch(ClockArch arch){
		_arch = arch;
	}
	public ClockArch getArch(){
		return _arch;
	}

	/*
  	  Myx Lifecycle Methods: these methods are called automatically by the framework
  	  as the bricks are created, attached, detached, and destroyed respectively.
	*/	
	public void init(){
	    //TODO Auto-generated method stub
	}
	public void begin(){
		//TODO Auto-generated method stub
	}
	public void end(){
		//TODO Auto-generated method stub
	}
	public void destroy(){
		//TODO Auto-generated method stub
	}

	@Override
	public void Clock(float cyclesPerSecond) {
		// TODO Auto-generated method stub
			setCyclesPerSecond(cyclesPerSecond);
			reset();
	}

	@Override
	public void setCyclesPerSecond(float cyclesPerSecond) {
		// TODO Auto-generated method stub
		this.millisPerCycle = (1.0f / cyclesPerSecond) * 1000;
	}

	@Override
	public void reset() {
		// TODO Auto-generated method stub
		this.elapsedCycles = 0;
		this.excessCycles = 0.0f;
		this.lastUpdate = getCurrentTime();
		this.isPaused = false;
	}

	@Override
	public void update() {
		// TODO Auto-generated method stub
		long currUpdate = getCurrentTime();
		float delta = (float)(currUpdate - lastUpdate) + excessCycles;
		
		//Update the number of elapsed and excess ticks if we're not paused.
		if(!isPaused) {
			this.elapsedCycles += (int)Math.floor(delta / millisPerCycle);
			this.excessCycles = delta % millisPerCycle;
		}
		
		//Set the last update time for the next update cycle.
		this.lastUpdate = currUpdate;
	}

	@Override
	public void setPaused(boolean paused) {
		// TODO Auto-generated method stub
		this.isPaused = paused;
	}

	@Override
	public boolean hasElapsedCycle() {
		// TODO Auto-generated method stub
		return isPaused;
	}

	/*
  	  Implementation primitives required by the architecture
	*/
}